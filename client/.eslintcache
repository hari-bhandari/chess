[{"/home/hari/WebstormProjects/chess/client/src/index.tsx":"1","/home/hari/WebstormProjects/chess/client/src/reportWebVitals.ts":"2","/home/hari/WebstormProjects/chess/client/src/App.tsx":"3","/home/hari/WebstormProjects/chess/client/src/styles/theme.ts":"4","/home/hari/WebstormProjects/chess/client/src/styles/GlobalStyle.ts":"5","/home/hari/WebstormProjects/chess/client/src/Piece.tsx":"6","/home/hari/WebstormProjects/chess/client/src/UI/Board/Board.tsx":"7","/home/hari/WebstormProjects/chess/client/src/UI/Board/RestartGame.tsx":"8","/home/hari/WebstormProjects/chess/client/src/UI/Board/BoardSquare.tsx":"9","/home/hari/WebstormProjects/chess/client/src/UI/Board/Square.tsx":"10","/home/hari/WebstormProjects/chess/client/src/UI/Board/Promote.tsx":"11","/home/hari/WebstormProjects/chess/client/src/game.js":"12"},{"size":675,"mtime":1612463380204,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1612132907753,"results":"15","hashOfConfig":"14"},{"size":1753,"mtime":1612804155393,"results":"16","hashOfConfig":"14"},{"size":526,"mtime":1612284796552,"results":"17","hashOfConfig":"14"},{"size":172,"mtime":1612271853422,"results":"18","hashOfConfig":"14"},{"size":1573,"mtime":1612464398783,"results":"19","hashOfConfig":"14"},{"size":1980,"mtime":1612804155417,"results":"20","hashOfConfig":"14"},{"size":1987,"mtime":1612804142161,"results":"21","hashOfConfig":"14"},{"size":1758,"mtime":1612804155401,"results":"22","hashOfConfig":"14"},{"size":514,"mtime":1612739654242,"results":"23","hashOfConfig":"14"},{"size":1169,"mtime":1612804155409,"results":"24","hashOfConfig":"14"},{"size":2142,"mtime":1612804147773,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1sgv1ii",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"/home/hari/WebstormProjects/chess/client/src/index.tsx",[],["56","57"],"/home/hari/WebstormProjects/chess/client/src/reportWebVitals.ts",[],"/home/hari/WebstormProjects/chess/client/src/App.tsx",[],"/home/hari/WebstormProjects/chess/client/src/styles/theme.ts",["58","59","60"],"interface chessColour{\n    white:string,\n    black:string\n}\nconst GrayBoard:chessColour={\n    white:'#D9D9D9',\n    black:'#929292'\n}\nconst BrownBoard:chessColour={\n    white:'#EBECD0',\n    black:'#B68860'\n}\nconst GreenBoard:chessColour={\n    white:'#EBECD0',\n    black:'#779556'\n}\nconst WoodBoard:chessColour={\n    white:'#BA9C78',\n    black:'#725238'\n}\n\nconst themeCommon ={\n    colors: {\n        light: '#ffffff',\n        navbar: '#25315b',\n        hamButton: '#ffffff',\n    },\n    ...WoodBoard\n\n}\nexport default themeCommon","/home/hari/WebstormProjects/chess/client/src/styles/GlobalStyle.ts",[],"/home/hari/WebstormProjects/chess/client/src/Piece.tsx",[],"/home/hari/WebstormProjects/chess/client/src/UI/Board/Board.tsx",["61"],"import React, {useEffect} from 'react';\nimport styled from \"styled-components\";\nimport BoardSquare from \"./BoardSquare\";\nimport {getPossibleMovesForASquare} from \"../../game\";\ninterface propsInterface {\n    board:[]|null\n}\nconst BoardContainer=styled.div`\n    width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: wrap;\n`\nconst Square=styled.div`\n    width: 12.5%;\n    height: 12.5%;\n`\n\nconst Board:React.FC<propsInterface> = ({board}) => {\n    const getPossibleMoves=(getPosition:string)=>{\n        const possibleMoves=getPossibleMovesForASquare(getPosition)\n        if(possibleMoves.length>0){\n            ChangeStyles(getPossibleMovesForASquare(getPosition))\n\n        }\n\n    }\n    //loop over and change colour of the squares\n    const ChangeStyles=(list:[]|undefined)=>{\n        console.log(list)\n        if(list!==null||list!==undefined){\n            //change the bg of the squares\n            list?.forEach(value => {\n                // @ts-ignore\n                console.log(value)\n                // @ts-ignore\n                document.getElementById(value).style.backgroundColor=\"red\"\n            })\n        }\n    }\n    function getXYPosition(i:number) {\n        const x = i% 8\n        const y = Math.abs(Math.floor(i / 8) - 7)\n        return { x, y }\n    }\n\n    function isBlack(i:number) {\n        const { x, y } = getXYPosition(i)\n        return (x + y) % 2 === 1\n    }\n    function getPosition(i:number) {\n        const { x, y } = getXYPosition(i)\n        const letter = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][\n            x\n            ]\n        return `${letter}${y + 1}`\n    }\n\n    return (\n        <BoardContainer>\n            {board?.flat().map((piece,i:number)=><Square key={i}>\n                <BoardSquare\n                piece={piece}\n                black={isBlack(i)}\n                getPosition={getPosition(i)}\n                getPossibleMoves={getPossibleMoves}\n            /></Square>)}\n        </BoardContainer>\n    );\n};\n\nexport default Board;","/home/hari/WebstormProjects/chess/client/src/UI/Board/RestartGame.tsx",["62","63"],"/home/hari/WebstormProjects/chess/client/src/UI/Board/BoardSquare.tsx",["64","65","66"],"import React, {useEffect, useState} from 'react';\nimport Square from \"./Square\";\nimport Piece from \"../../Piece\";\nimport styled from \"styled-components\";\nimport {useDrop} from \"react-dnd\";\nimport {handleMove} from '../../game'\nimport {gameSubject,getPossibleMovesForASquare} from \"../../game\";\nimport Promote from \"./Promote\";\ninterface props{\n    piece:any;\n    black:boolean,\n    getPosition:string,\n    getPossibleMoves:(getPosition:string)=>void\n}\nconst SquareContainer=styled.div`\n  width: 100%;\n  height: 100%;\n`\nconst BoardSquare:React.FC<props> = ({piece,black,getPosition,getPossibleMoves}) => {\n    const [promotion,setPromotion]=useState<any>(null)\n    useEffect(()=>{\n    },[promotion])\n    const[,drop]=useDrop({\n        accept:'piece',\n        drop:(item)=>{\n            // @ts-ignore\n            const [FromPosition]=item.id.split('_')\n            handleMove(FromPosition,getPosition)\n        }\n    })\n\n    const closeTab=()=>{\n        setPromotion(null)\n    }\n    //function to declare weather the square is a potential move or not\n    const isSquareAPotentialMove=()=>{\n\n    }\n    useEffect(()=>{\n       // @ts-ignore\n        const subscribe=gameSubject.subscribe((value)=>value?.pendingPromotion&&pendingPromotion?.to===getPosition?setPromotion(pendingPromotion):setPromotion(null))\n        return ()=>subscribe.unsubscribe()\n    },[])\n    return (\n        <SquareContainer ref={drop} onClick={()=>getPossibleMoves(getPosition)} >\n            {promotion?<Promote promotion={promotion} closeTab={closeTab}/>:\n            <Square black={black}  position={getPosition} >\n                {piece&&<Piece piece={piece} position={getPosition}/>}\n            </Square>}\n            \n        </SquareContainer>\n    );\n};\n\nexport default BoardSquare;","/home/hari/WebstormProjects/chess/client/src/UI/Board/Square.tsx",[],"/home/hari/WebstormProjects/chess/client/src/UI/Board/Promote.tsx",[],"/home/hari/WebstormProjects/chess/client/src/game.js",["67"],"import * as Chess from 'chess.js'\nimport {BehaviorSubject} from \"rxjs\";\nimport {useState} from \"react\";\n\nconst chess=new Chess();\nexport const  gameSubject=new BehaviorSubject();\n\nexport const initGame=()=>{\n    const savedGame=localStorage.getItem('savedGame')\n    if(savedGame){\n        chess.load(savedGame)\n    }\n    updateGame()\n}\nexport function handleMove(from, to) {\n    const promotions = chess.moves({ verbose: true }).filter(m => m.promotion)\n    console.table(promotions)\n    if (promotions.some(p => `${p.from}:${p.to}` === `${from}:${to}`)) {\n        const pendingPromotion = { from, to, color: promotions[0].color }\n        updateGame(pendingPromotion)\n    }\n    const { pendingPromotion } = gameSubject.getValue()\n    if (!pendingPromotion) {\n        move(from, to)\n    }\n}\nexport const getPossibleMovesForASquare=(square)=>{\n    const moves=chess.moves({square})\n    console.log(moves)\n    return moves\n}\nexport function move(from,to,promotion){\n    let tempMove = { from, to }\n    if (promotion) {\n        tempMove.promotion = promotion\n    }\n    const legalMove = chess.move(tempMove)\n\n    if (legalMove) {\n        updateGame()\n    }\n\n\n}\nconst updateGame=(pendingPromotion)=>{\n    const isGameOver=chess.game_over()\n    const newGame={\n        board:chess.board(),\n        pendingPromotion,\n        isGameOver,\n        result:isGameOver?getGameResult():null,\n        turn:chess.turn()\n    }\n    localStorage.setItem('savedGame',chess.fen())\n    gameSubject.next(newGame)\n\n}\nconst getGameResult=()=>{\n    if(chess.in_checkmate()){\n        const winner=chess.turn()===\"w\"?\"BLACK\":\"WHITE\"\n        return `CHECKMATE- ${winner} won`\n    }else if(chess.in_draw()){\n        let reason='50 - MOVES -RULE'\n        if(chess.in_stalemate()){\n            reason=\"Stalemate\"\n        }\n        else if (chess.in_threefold_repetition()){\n            reason=\"REPETITION\"\n        }else if(chess.insufficient_material()){\n            reason=\"Insufficient Material\"\n        }\n        return `${reason} --DRAW`\n    }\n    else {\n        return `You're Something special`\n    }\n}\nexport const resetGame=()=>{\n    chess.reset()\n    updateGame()\n}",["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":5,"column":7,"nodeType":"76","messageId":"77","endLine":5,"endColumn":28},{"ruleId":"74","severity":1,"message":"78","line":9,"column":7,"nodeType":"76","messageId":"77","endLine":9,"endColumn":29},{"ruleId":"74","severity":1,"message":"79","line":13,"column":7,"nodeType":"76","messageId":"77","endLine":13,"endColumn":29},{"ruleId":"74","severity":1,"message":"80","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":25},{"ruleId":"74","severity":1,"message":"81","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":13},{"ruleId":"74","severity":1,"message":"82","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":13},{"ruleId":"74","severity":1,"message":"83","line":7,"column":21,"nodeType":"76","messageId":"77","endLine":7,"endColumn":47},{"ruleId":"74","severity":1,"message":"84","line":36,"column":11,"nodeType":"76","messageId":"77","endLine":36,"endColumn":33},{"ruleId":"85","severity":1,"message":"86","line":43,"column":7,"nodeType":"87","endLine":43,"endColumn":9,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":3,"column":9,"nodeType":"76","messageId":"77","endLine":3,"endColumn":17},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'GrayBoard' is assigned a value but never used.","Identifier","unusedVar","'BrownBoard' is assigned a value but never used.","'GreenBoard' is assigned a value but never used.","'useEffect' is defined but never used.","'White' is defined but never used.","'Black' is defined but never used.","'getPossibleMovesForASquare' is defined but never used.","'isSquareAPotentialMove' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPosition'. Either include it or remove the dependency array.","ArrayExpression",["93"],"no-unused-vars","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},"Update the dependencies array to be: [getPosition]",{"range":"96","text":"97"},[1344,1346],"[getPosition]"]